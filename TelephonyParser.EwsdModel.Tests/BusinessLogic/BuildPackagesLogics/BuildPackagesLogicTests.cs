using Microsoft.VisualStudio.TestTools.UnitTesting;
using TelephonyParser.EwsdModel.BusinessLogic.BuildPackagesLogics;
using TelephonyParser.EwsdModel.BusinessLogic.Models.RecordPackages;

namespace TelephonyParser.EwsdModel.Tests.BusinessLogic.BuildPackagesLogics;

[TestClass()]
public class BuildPackagesLogicTests
{
    private readonly byte[] _bytes1 = new byte[] 
    { 
        0x84, 0x51, 0x00, 0x8c, 0x00, 0x00, 0x11, 0x8e, 
        0x8e, 0x0a, 0x03, 0x13, 0x0a, 0x98, 0x35, 0x91, 0x36, 0x28, //  Calling Party Number
        0x64, 0x15, 0x0b, 0x01, 0x00, 0x06, 0x3b, 0x0d, 0x32, 0x00, 0x00, // Date/Time/Duration
        0x67, 0x00, 0x00, 0x00, //  Charge Units For Connection
        0x6b, 0x42, 0x49, 0x4d, 0x54, 0x43, 0x20, 0x01, 0x00, 0x0e, // Trunk Identification Incoming (CIC Format)
        0x6c, 0x42, 0x57, 0x53, 0x4d, 0x47, 0x20, 0x00, 0x00, 0x0f, // Trunk Identification Outgoing (CIC Format)
        0x6e, 0x06, 0x36, 0xa0, 0x13, 0x2e, // Connection Identification Number
        0x7a, 0x7f, 0x00, // Zone
        0x82, 0x05, 0x10, 0x00, 0x0a, // Traffic Quality Data 
        0x8a, 0x04, 0x00, 0x00, // B Meter Pulses
        0xa8, 0x0a, 0x03, 0x10, 0x0a, 0x39, 0x42, 0x23, 0x75, 0x53 //  Called Party Number
    };

    private readonly byte[] _bytes2 = new byte[] 
    { 
        0x84, 0x51, 0x00, 0x8c, 0x00, 0x00, 0x11, 0xaa, 0xaa, 0x0a, 0x03, 0x10, 0x0a, 0x39, 0x42, 0x24, 0x40, 
        0x98, 0x64, 0x15, 0x0b, 0x01, 0x0e, 0x05, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x6b, 0x42, 0x57, 0x43, 0x49, 0x54, 
        0x59, 0x00, 0x00, 0x04, 0x6c, 0x42, 0x57, 0x53, 0x4d, 0x47, 0x20, 0x02, 0x00, 0x19, 0x6e, 0x06, 0x38, 0x10, 0x95, 0x6a, 0x7a, 0x7f, 
        0x00, 0x82, 0x05, 0x10, 0x00, 0x00, 0x8a, 0x04, 0x00, 0x00, 0xa8, 0x0a, 0x03, 0x10, 0x0a, 0x39, 0x42, 0x23, 0x43, 0x22 
    };

    [TestMethod()]
    public void BuildEwsdPackagesLogic_Build_Test()
    {
        var sut = new BuildPackagesLogic();
        var packages = sut.Build(_bytes1);

        Assert.AreEqual(4, packages.Length);
        Assert.IsNotNull(packages.FirstOrDefault(x => x.Number == FixedPart.Startbyte));
        Assert.IsNotNull(packages.FirstOrDefault(x => x.Number == DateTimeDuration.Startbyte));
        Assert.IsNotNull(packages.FirstOrDefault(x => x.Number == CallingPartyNumber.Startbyte));
        Assert.IsNotNull(packages.FirstOrDefault(x => x.Number == ChargeUnitsForConnection.Startbyte));
    }
}